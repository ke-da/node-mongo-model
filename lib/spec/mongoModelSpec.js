// Generated by CoffeeScript 1.7.1
var mongoModel;

mongoModel = require("../mongoModel");

describe('MongoModel', function() {
  var dbInit, model, testCollection;
  model = null;
  testCollection = "testModel";
  dbInit = {
    db: "mongodb://localhost/test"
  };
  beforeEach(function() {
    return model = new mongoModel;
  });
  it('should set collectionName', function() {
    model.setCollectionName(testCollection);
    return expect(model.collectionName).toEqual(testCollection);
  });
  it('should connect to db', function() {
    var p;
    p = (model.constructor.Init(dbInit)).then(function() {
      expect(model.db).not.toBe(null);
      return console.log("DB Connected");
    });
    return waitsFor(function() {
      return p != null ? p.isFulfilled() : void 0;
    });
  });
  it('should drop collection', function() {
    var p;
    p = model.db.dropCollectionAsync(testCollection).then(function() {
      return console.log("Collection Dropped");
    });
    return waitsFor(function() {
      return p != null ? p.isFulfilled() : void 0;
    });
  });
  it('should get right collection', function() {
    var p;
    model.setCollectionName(testCollection);
    p = model.getCollection().then(function(col) {
      expect(typeof col).toBe("object");
      expect(col.collectionName).toBe(testCollection);
      return console.log("Got Right collection");
    });
    return waitsFor(function() {
      return p != null ? p.isFulfilled() : void 0;
    });
  });
  it('should insert to collection', function() {
    var p, p1, p2;
    model.setCollectionName(testCollection);
    p1 = model.insert([
      {
        batch1: 1
      }, {
        batch2: 2
      }
    ]).then(function(docs) {
      expect(Array.isArray(docs)).toBe(true);
      expect(docs.length).toBe(2);
      return console.log(docs);
    });
    p2 = model.insert({
      hello: "world"
    }).then(function(doc) {
      expect(Array.isArray(doc)).toBe(false);
      expect(doc._id).not.toBe(null);
      expect(doc.hello).toBe("world");
      return console.log(doc);
    });
    p = p1.constructor.all([p1, p2]).then(function() {
      return console.log("Insertted");
    });
    return waitsFor(function() {
      return p != null ? p.isFulfilled() : void 0;
    });
  });
  it('should update collection', function() {
    var p;
    model.setCollectionName(testCollection);
    p = model.update({
      hello: "world"
    }, {
      hello: 'New world'
    }).then(function(_arg) {
      var cnt;
      cnt = _arg[0];
      expect(cnt).toBe(1);
      return console.log("Updated");
    });
    return waitsFor(function() {
      return p != null ? p.isFulfilled() : void 0;
    });
  });
  it("should upsert row", function() {
    var p;
    model.setCollectionName(testCollection);
    p = model.upsertBy("hello", {
      hello: "New world 2",
      upsertAttr: true
    }).then(function(cnt) {
      expect(cnt).toBe(1);
      return console.log("Upsertted");
    });
    return waitsFor(function() {
      return p != null ? p.isFulfilled() : void 0;
    });
  });
  return it("should find row with right cnt", function() {
    var p;
    model.setCollectionName(testCollection);
    p = model.findArray({
      hello: {
        $exists: 1
      }
    }).then(function(items) {
      expect(items.length).toBe(2);
      return console.log(items);
    });
    return waitsFor(function() {
      return p != null ? p.isFulfilled() : void 0;
    });
  });
});
